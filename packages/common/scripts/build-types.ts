import fs from 'fs';
import path from 'path';
import { compile } from 'json-schema-to-typescript';
import { pascalCase } from 'change-case';
import { RouteSchema } from 'fastify';
import { entities, routes } from '../src/schemas';

const GENERATED_TYPES_FILE = path.resolve(__dirname, '..', 'src', 'types.generated.ts');
const GENERATED_BANNER = `/* eslint-disable */
/**
 * This type was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema.
 */

import { RouteOptions } from './types';

`;

const JSTT_OPTIONS = { bannerComment: '' };
const STRING_ANY = '{ [key: string]: any }';

async function main() {
  await fs.promises.writeFile(GENERATED_TYPES_FILE, GENERATED_BANNER);

  // Schemas for routes.
  for (const [routeName, routeSchema] of Object.entries(routes)) {
    const types: Partial<Record<keyof RouteSchema, string>> = {};
    for (const [schemaType, schema] of Object.entries(routeSchema)) {
      console.log(`Route Schema: ${routeName} ${schemaType}`);
      const typeName = pascalCase(routeName + pascalCase(schemaType));
      types[schemaType as keyof RouteSchema] = typeName;

      // NOTE: build the "success" or "200" schema as the reponse.
      // HACK: this is not a nice way to do it, find a better way.
      const typescript = await compile(schemaType === 'response' ? schema['200'] : schema, typeName, JSTT_OPTIONS);
      await fs.promises.appendFile(GENERATED_TYPES_FILE, typescript);
    }

    // Construct a RouteOptions type from the above types.
    const { querystring = STRING_ANY, params = STRING_ANY, headers = STRING_ANY, body = '{}' } = types;
    const typeName = `${pascalCase(routeName)}RouteOptions`;
    const routeOptionsType = `export type ${typeName} = RouteOptions<${querystring}, ${params}, ${headers}, ${body}>;\n`;
    await fs.promises.appendFile(GENERATED_TYPES_FILE, routeOptionsType);
  }

  // Schemas for entities.
  for (const [name, schema] of Object.entries(entities)) {
    console.log(`Entity Schema: ${name}`);
    const typescript = await compile(schema, pascalCase(name), JSTT_OPTIONS);
    await fs.promises.appendFile(GENERATED_TYPES_FILE, typescript);
  }
}

if (require.main === module) {
  main().then(undefined, err => {
    console.error(err);
    process.exit(1);
  });
}
